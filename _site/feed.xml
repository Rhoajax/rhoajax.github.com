<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log Horizon(記録の地平線)</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 31 Mar 2016 13:28:30 +0100</pubDate>
    <lastBuildDate>Thu, 31 Mar 2016 13:28:30 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 12:40:00 +0100</pubDate>
        <link>http://yourdomain.com/jekyll/update/2016/03/31/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2016/03/31/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Future Internet: Clean slate or Evolutionary?</title>
        <description>&lt;p&gt;For years the networking research community debates whether they should focus on designing new network architectures or keep improving the current ones. A paper [1] shows a point/counterpoint debate between two representatives of each side. In this short essay, I’d like to briefly summarize the opinions about the future development of Internet based mainly on this paper.&lt;/p&gt;

&lt;h1 id=&quot;who&quot;&gt;Who?&lt;/h1&gt;

&lt;p&gt;Clean-slate vs. Evolutionary&lt;/p&gt;

&lt;h1 id=&quot;why----main-points&quot;&gt;Why? – Main points&lt;/h1&gt;

&lt;p&gt;The main argument of Clean-slate approach is that current architecture faces many challenges: security, mobility, and network management, etc. [?] They are all deeply rooted in early design decisions of the Internet. Changes have to be made.&lt;/p&gt;

&lt;p&gt;According to the Evolutionary approach, however, successful real-world implementation means everything. Current implementations are merely prepared for the test of economic and political constraints in the real world. As an example, ARPANET’s success results from it being used as a production network.&lt;/p&gt;

&lt;p&gt;There is no doubt that the Internet is a enormous success. However, it doesn’t mean the current architecture is unarguably the “Right Thing”. In fact, this paper [2] recalls some of the early reasoning that shaped the Internet protocols as it is. It turns out that some of them are merely a winner out of some possible choices. For example, the seemingly basic TCP/IP layer structure is not part of the original proposal, and “most services within the Internet would like a more sophisticated transport model than simple datagram – e.g. a  “stream” is suggested as a possibly better building block. Besides, different network design is based on different priorities. As to ARPANET, its most important goal is its survivability, which then leading to a stateless connections. That is not necessarily the case in every network. Moreover, a lot of current research is deployed in production network, such as big companies like Google [3]. They are just not public yet. ARPANET itself is also one option out of many [?]. It is difficult to say that the success of ARPANET is totally without luck.&lt;/p&gt;

&lt;h1 id=&quot;what----research-focus&quot;&gt;What? – Research Focus&lt;/h1&gt;

&lt;p&gt;A proponent for evolutionary approach may declare that the clean-slate approach means designing a significantly better architecture on nearly all aspects than the current one, and if it can’t, it’s a failure. This is a misunderstanding. The fact is, a clean-slate cares more about new methodologies for designing networks/protocols than its immediate deployment in real world. According to the clean-slate approach, the field of networking is far from mature: “We do not have anything approaching a discipline for creating, analyzing, and operating network protocols…no top-down treatment, laws, or even rules of thumbs.”&lt;/p&gt;

&lt;p&gt;Regarding the research focus of network design theories, &lt;strong&gt;prescriptive network theory&lt;/strong&gt; seems quite promising, against most of today’s descriptive theory.&lt;/p&gt;

&lt;h1 id=&quot;how----experiment--implementation&quot;&gt;How? – Experiment &amp;amp; Implementation&lt;/h1&gt;

&lt;p&gt;The Clean-slate approach states that building and deploy real systems on experimental facilities, such as &lt;a href=&quot;https://www.geni.net/&quot;&gt;GENI&lt;/a&gt; and &lt;a href=&quot;http://www.fp7-federica.eu/&quot;&gt;Federica&lt;/a&gt;, is an crucial part of a continuous cycle of research. Though the Evo declares that few clean-slate attempts succeed, such as per-flow QoSS guarantees CLNP and XCP, the fact is that IPv6 is already under a large-scale deployment. Times change, the clean-slate efforts is not necessary but also possible.&lt;/p&gt;

&lt;p&gt;Concerning experiment and implementation in the development of Internet architectures, we should pay attention to &lt;strong&gt;SDN&lt;/strong&gt; and &lt;strong&gt;Virtulization&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;when&quot;&gt;When?&lt;/h1&gt;

&lt;p&gt;I tend to believe that “Punctuated Equilibrium” theory does apply in the evolution of the Internet, which means one species will remain stable before the next great evolutionary change. Currently the basic networking theories taught in school are still not quite different from what 20 years ago ( &lt;em&gt;is it?&lt;/em&gt; ), and today may not be a perfect time for an total revolution of Internet architectures, but given cumulating enough research, &lt;em&gt;“His judgement cometh and that right soon”&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;[1] Rexford, Jennifer, and Constantine Dovrolis. “Future Internet architecture: clean-slate versus evolutionary research.” Communications of the ACM 53, no. 9 (2010): 36-40.&lt;/p&gt;

&lt;p&gt;[2] Clark, David. “The design philosophy of the DARPA Internet protocols.” ACM SIGCOMM Computer Communication Review 18, no. 4 (1988): 106-114.&lt;/p&gt;

&lt;p&gt;[3] Singh, A., Ong, J., Agarwal, A., Anderson, G., Armistead, A., Bannon, R., … &amp;amp; Vahdat, A.. Jupiter Rising: A Decade of Clos Topologies and Centralized Control in Google’s Datacenter Network. In Proc. 2015 ACM SIGCOMM (pp. 183-197).&lt;/p&gt;

&lt;p&gt;This work is licensed under &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/network/2016/03/30/future-internet-clean-slate-or-evolutionary.html</link>
        <guid isPermaLink="true">http://yourdomain.com/network/2016/03/30/future-internet-clean-slate-or-evolutionary.html</guid>
        
        <category>Network</category>
        
        
        <category>network</category>
        
      </item>
    
      <item>
        <title>I'm back!</title>
        <description>&lt;p&gt;After one year, now I am ready to pick up my bloggin site. For one thing, I just can’t find a handy blog site that is not blocked here. Besides, this old-schoold style of writing fit my taste.&lt;/p&gt;

&lt;p&gt;OK, I’m ready.&lt;/p&gt;

&lt;p&gt;Oh, I almost forget it: Happy New Year! (Wow, time really flies, isn’t it?)
皆さん、新年、おめでとうございます~ (^―^)　ニコリ&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/non-sense/2014/12/31/im-back.html</link>
        <guid isPermaLink="true">http://yourdomain.com/non-sense/2014/12/31/im-back.html</guid>
        
        
        <category>non-sense</category>
        
      </item>
    
      <item>
        <title>Tips from Joel on Software</title>
        <description>&lt;p&gt;这一篇文章写于一二年二月二十五日，从之前的博客搬运而来。&lt;/p&gt;

&lt;p&gt;More Joel on Software, 中文译名为《软件随想录》，行文轻松幽默，充满了一位在软件行业摸爬滚打十几年的前辈的经验之谈。简单地看了其中的第二章“写给未来程序员的建议”和第五部分“编程建议”——其他部分是有关软件的管理运营等内容的，我认为对于目前脱离了CtrlC+CtrlV就只会编HelloWorld的自己来说，这些内容就和《代码大全》和《人月神话》等著作一样，现在看这些是不合适的。从这两章的内容中，大概列举了一下作者对于程序员的一些建议如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“学校只教Java是危险的” —— 因为它不够难。听起来是个很抖M的观点。
Joel认为，有些内容，比如C（不是C++）,函数式编程，Haskell，Lisp，Scheme，递归，指针等等，是编程思想的基础，其真正精髓也都是很难掌握的 —— 就是得有人来告诉你你的脑子并不足以胜任程序员这个职务。
如果你不了解机器语言，如果你不能解释&lt;code&gt;while(*s++ = *t++)&lt;/code&gt;这句话是在复制字符串，那么无论你懂再多的继承多态异常等等等等大道理，都不能够在高级语言的层次上写出高效的代码。
相反，“我从来没见过哪个能用Scheme、Haskell和C中的指针编程的人竟然不能在2天之内学会Java并且写出的Java程序竟然不能胜过那些有5年Java编程经验的人。”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从课程设置上就可以看出这些差别。
在常春藤盟校，只讲授UNIX、函数式编程、状态及理论。随着学校排名越来越往下，你就会看到Java语言开始出现了……所以说我感觉这就是从理论基础到实际应用的这么个过程。当然在实际应用中，这些基础其实是不常用而且有些也是最好不要使用的，比如指针。
但是如果不是真正地了解指针，你连一行Linux的代码也看不懂。如果不懂函数式编程，你就无法创造出MapReduce(原来早在这时就见过MapReduce这个词了,真是出乎意外)。
总之，要有牢固的基础。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但是貌似也不能完全投身于基础。Joel回忆自己当年的一位教授“动态逻辑”课的老师，在证明“一个布尔值在进行取反运算偶数次后，其值同最开始一样”这么一个直觉就知道是正确的命题时，耗费了相当大的精力，一度证明到老师自己都快绝望的地步。作者的评价是“用这种艰深苦涩的理论来证明计算机程序这样实际、有趣的东西，不是一种有成效的方式……于是我判断自己并不适合读计算机系的研究生。” —— 如果抱着轻松的态度学习计算机科学，那么大可不必理会这种没多少实际意义的东西。比如刘左同志。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;练好写作技术。一个口齿不清的程序员和一名Leader的区别就在于后者可以通过清晰的注释和说明来使他人明白自己代码的价值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;学好微观经济学。如果你懂得商业规则，你将是一个更加有价值的程序员，否则你就有可能提出一些在资本主义世界中毫无意义的垃圾点子。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;大量的编程实践&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多的内容可以参见&lt;a href=&quot;http://www.joelonsoftware.com/&quot;&gt;Joel的网站&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Dec 2013 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/2013/12/15/tips-from-joel-on-software.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/12/15/tips-from-joel-on-software.html</guid>
        
        
      </item>
    
      <item>
        <title>Kaggle : Python, R, Matlab and Julia</title>
        <description>&lt;p&gt;来自Quora的&lt;a href=&quot;http://www.quora.com/Kaggle/How-useful-is-Matlab-for-Kaggle-as-compared-with-R-and-Python&quot;&gt;一篇帖子&lt;/a&gt;对比了这几种语言在Kaggle上使用时的特色。&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 琐碎但是齐全的各色装备：Pandas, scikit.learn, numpy, scipy, ipython, matplotlib，不同情况下按需组装使用。
- IPyhton极佳的交互体验
- 作为一门通用编程语言的所有优势
- 慢！
- 因为琐碎，所以也有相应的缺点。比如有些工具仍然只支持2.7版本。
- 开源的生态环境
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;R&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 一般来说，如果这个问题对统计学家来说比较有趣，那么它就适于R
- 高质量的库，且专注于Unit Test
- 在数据分析时RStudio 提供优秀的交互体验
- 慢，各种占内存。
- 语言本身长得难看（仅代表作者观点，我就不这么认为嘛……R自有它自己的一套哲学）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Matlab&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 信号分析的无价之宝
- 对于任何涉及到矩阵运算的过程，都是最简洁漂亮的语言。处理矩阵得心应手，相对的，处理其他东西就不那么利索。
- 非开源，无法和其他系统整合
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Julia&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 单听名字就能判定性别的语言……开个玩笑……
- 新生语言（2012年），在扩展库支持方面还很弱。
- 努力把Matlab、Python等的高等语言的特性和C的速度结合起来。
- 语法和Matlab很相似。但拥有高效的for loop，因此避免了不必要的Vectorization。
- 我个人看好这种语言，以后后机会一定要试用一下。

另外，关于Julia，其主要开发者之一“在 Strata 站点上[撰文阐释](http://strata.oreilly.com/2013/10/julias-role-in-data-science.html)了 Julia 在数据科学中的定位： 文章娓娓道来，解释了 Julia 语言的设计、与 R 和  Python 的关系，综述了生态系统的现状，以及对未来的展望~”（以上文字来自“统计之都”）在对于未来的展望这方面，作者提到了三点：一是完善Julia的图形工具，二是提高其与Python的整合能力，三是提升建模工具质量，继续引入R的各种统计功能。当然，除此之外，Julia自身也还在持续进化中。
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 15 Dec 2013 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/2013/12/15/kaggle--python-r-matlab-and-julia.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/12/15/kaggle--python-r-matlab-and-julia.html</guid>
        
        
      </item>
    
      <item>
        <title>First Jekyll</title>
        <description>&lt;p&gt;Here is a try.&lt;/p&gt;

&lt;p&gt;我们来试着捕捉它。&lt;/p&gt;

&lt;p&gt;できる！俺達は、ガンダムだあああああ！&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/2013/12/10/first-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/12/10/first-jekyll.html</guid>
        
        
        <category></category>
        
      </item>
    
  </channel>
</rss>
